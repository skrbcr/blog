<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ja"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://skrbcr.github.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://skrbcr.github.io/blog/" rel="alternate" type="text/html" hreflang="ja" /><updated>2024-03-26T14:11:09+09:00</updated><id>https://skrbcr.github.io/blog/feed.xml</id><title type="html">今月の物置</title><subtitle>物理＋プログラミング＋その他</subtitle><author><name>今月の新刊（@skrbcr）</name></author><entry><title type="html">動画投稿：【東方MMD】開設！　紅魔館データセンター</title><link href="https://skrbcr.github.io/blog/movie/movie_komakan_data_center" rel="alternate" type="text/html" title="動画投稿：【東方MMD】開設！　紅魔館データセンター" /><published>2024-03-26T00:00:00+09:00</published><updated>2024-03-26T00:00:00+09:00</updated><id>https://skrbcr.github.io/blog/movie/movie_komakan_data_center</id><content type="html" xml:base="https://skrbcr.github.io/blog/movie/movie_komakan_data_center"><![CDATA[<p>ニコニコ動画にて<a href="https://www.nicovideo.jp/watch/sm43578229">動画</a>を投稿しました。</p>

<h2 id="使用作品目録">使用作品目録</h2>
<p>使わせていただいた素材作品の紹介です。</p>

<h2 id="モデル">モデル</h2>
<h3 id="キャラクター">キャラクター</h3>
<ul>
  <li>レミリア・スカーレット：Kanata / anek / eto / キングM / Cresato / DeviantArt - YamiSweet / Montecore / 雪萱</li>
  <li>十六夜咲夜 Ver.2.20 Rev.G Type-E(ダンス_上着A_膝丈スカート_パンプス)：アールビット</li>
  <li>フランドール・スカーレット：Kanata / anek / eto / キングM / Cresato / DeviantArt - YamiSweet / Montecore / 雪萱</li>
  <li>パチュリー・ノーレッジ Ver.2.00 Rev.B Type-C(フル_おさげ_ケープ_ロンスカ_ブーツA_パンプス_あずき, フル_ポニテB_ミニスカ_ハイヒール_あずき)：アールビット</li>
  <li>紅美鈴 Ver2.10_Type-C(フル_ロングヘア_半袖_膝丈_パンプス)：アールビット</li>
  <li>小悪魔 アールビット式りとばな風改変+翼等変更モデル(こあ)：アールビット / モンテコア / HVP / nya / ココア / iRon0129 / 切な顔P / りとばな / 小悪魔らぼらとりー / remii / あい</li>
  <li>河城にとり ver0.95（河城にとり・おかっぱ・メガネ・短パン）：鯖缶</li>
  <li>妖精（東方Project） ver4.11-1：志賀内サクシャ</li>
</ul>

<h3 id="ステージ">ステージ</h3>
<ul>
  <li>紅魔館の部屋セット Ver3.00_Rev.B：アールビット</li>
  <li>紅魔館, 紅魔館 図書館：フレスベルク</li>
</ul>

<h3 id="静物">静物</h3>
<ul>
  <li>食器付きキャビネット（食器棚b1）：とりそば</li>
  <li>ソファと椅子v1.1（Sofa_1）：とりそば</li>
  <li>Classic Wood Table：Biser Borislavov（"Classic Wood Table" (https://skfb.ly/ovOPB) by Biser Borislavov is licensed under Creative Commons Attribution (http://creativecommons.org/licenses/by/4.0/).）</li>
  <li>テーブルランプ（スタンドランプ_c）：とりそば</li>
  <li>アンティーク家具いろいろIII：とりそば</li>
  <li>サービングカート / デザートプレート2 / ショートケーキ / スーパーコンピューター / パソコンディスプレイ / 鼻風船 / どうみても本棚：今月の新刊</li>
  <li>ティーカップ・ポットのセット：Phase ten（fromNu）</li>
  <li>天蓋つきベッド：メカクラゲ</li>
  <li>めくれる掛け＆敷き布団N2：ニーナ</li>
  <li>"Fine Persian Esfahan Carpet" (https://skfb.ly/opVD7) by mfb64 is licensed under Creative Commons Attribution (http://creativecommons.org/licenses/by/4.0/).</li>
  <li>"Persian Malayer Carpet" (https://skfb.ly/opVHO) by mfb64 is licensed under Creative Commons Attribution (http://creativecommons.org/licenses/by/4.0/).</li>
  <li>CATの938Mぽいホイールローダー：ねこま</li>
  <li>"Chevrolet Jumbo Truck" (https://skfb.ly/6WVRC) by Medhatelo is licensed under Creative Commons Attribution (http://creativecommons.org/licenses/by/4.0/).</li>
  <li>本の山：AMN</li>
  <li>イベント用テーブル / たんこぶset：ぐず</li>
  <li>インテリア用古書セット：とりそば</li>
  <li>魔導書：アールビット</li>
  <li>出現する魔法陣：切な顔P</li>
</ul>

<h3 id="アクセサリー">アクセサリー</h3>
<ul>
  <li>++skies; incskies_024_8k / incskies_015_8k：aokcub</li>
  <li>スカイドームいろいろ詰め合わせ：額田倫太郎</li>
</ul>

<h2 id="エフェクト">エフェクト</h2>
<ul>
  <li>AutoLuminous：そぼろ / かんな</li>
  <li>ExcellentShadow：そぼろ</li>
  <li>o_Diffusion：おたもん</li>
  <li>ParticleEx：ビームマンP</li>
  <li>水面エフェクトver5.0：ビームマンP</li>
</ul>

<h2 id="bgm">BGM</h2>
<ul>
  <li>ラクトガール　～ 少女密室　紅紫のティーポット（nc167808）：とぼそ</li>
  <li>Locked in her Embrace（nc272097）：しおーる</li>
  <li>無い本なんて、あるわけない【ヴワル魔法図書館 パロディ】（nc196770）：みるふぃ</li>
  <li>明から明スイッチ：OtoLogic</li>
  <li>Grieg: Peer Gynt Suite No. 1, Op. 46 - I. Morning Mood：Musopen</li>
  <li>ヴェルディ：『レクイエム』から「怒りの日」/ チャイコフスキー：大序曲『1812年』 / チャイコフスキー：幻想序曲『ロメオとジュリエット』：クラシック名曲サウンドライブラリー</li>
</ul>

<h2 id="se">SE</h2>
<ul>
  <li>掃除機の電源を入れる / 木のドアをノック1 / ドアを開ける3 / 大爆発1：効果音ラボ</li>
  <li>工事のドリル（drill_concrete）：小森 平</li>
  <li>Phase02-1：OtoLogic</li>
</ul>

<h2 id="フォント">フォント</h2>
<ul>
  <li>Source Han Serif / Source Han Sans：Adobe</li>
  <li>HG行書体：リコー</li>
  <li>ラノベPOP V2：https://flopdesign.booth.pm/items/2328262</li>
</ul>

<h2 id="ツール">ツール</h2>
<ul>
  <li>MikuMikuDance：樋口優</li>
  <li>MikuMikuEffect：舞力介入P</li>
  <li>YukkuriMovieMaker4：饅頭遣い</li>
  <li>DaVinci Resolve</li>
  <li>AquesTalk：アクエスト</li>
  <li>AviUtl：ＫＥＮくん</li>
  <li>拡張 x264 出力(GUI) Ex：rigaya</li>
</ul>

<h2 id="ひとり反省会">ひとり反省会</h2>
<p>【ToDo!】</p>]]></content><author><name>今月の新刊（@skrbcr）</name></author><category term="movie" /><summary type="html"><![CDATA[ニコニコ動画にて動画を投稿しました。]]></summary></entry><entry><title type="html">rbenv を用いて Ruby をインストール</title><link href="https://skrbcr.github.io/blog/programming/install_ruby_by_rbenv" rel="alternate" type="text/html" title="rbenv を用いて Ruby をインストール" /><published>2023-12-30T00:00:00+09:00</published><updated>2023-12-30T00:00:00+09:00</updated><id>https://skrbcr.github.io/blog/programming/install_ruby_by_rbenv</id><content type="html" xml:base="https://skrbcr.github.io/blog/programming/install_ruby_by_rbenv"><![CDATA[<p>Ruby の最新版が必要になり調べていたところ、Ruby 環境を管理する rbenv を知ったのでインストールした。</p>

<h2 id="実行環境">実行環境</h2>

<table>
  <thead>
    <tr>
      <th style="text-align: center">ソフト</th>
      <th style="text-align: center">バージョン</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">OS</td>
      <td style="text-align: center">Windows 11 Home 23H2 22631.2861</td>
    </tr>
    <tr>
      <td style="text-align: center">WSL</td>
      <td style="text-align: center">2.0.9.0</td>
    </tr>
    <tr>
      <td style="text-align: center">Linux</td>
      <td style="text-align: center">Arch Linux</td>
    </tr>
    <tr>
      <td style="text-align: center">rbenv</td>
      <td style="text-align: center">1.2.0</td>
    </tr>
    <tr>
      <td style="text-align: center">Ruby</td>
      <td style="text-align: center">3.3.0</td>
    </tr>
  </tbody>
</table>

<h2 id="作業の流れ">作業の流れ</h2>

<ol>
  <li>rbenv のインストール</li>
  <li>Ruby のインストール</li>
  <li>プロジェクトのセットアップ</li>
</ol>

<h2 id="rbenv-のインストール">rbenv のインストール</h2>
<p><a href="https://github.com/rbenv/rbenv">GitHub の README</a> に従う。自分は Arch Linux を使っているので以下の通り</p>

<h3 id="aur-パッケージから-rbenv-をダウンロードインストール">AUR パッケージから rbenv をダウンロード・インストール</h3>
<p><a href="https://aur.archlinux.org/packages/rbenv">AUR のサイト</a> で Git の URL を入手。上の方の <code class="language-plaintext highlighter-rouge">Git Clone URL</code> がそれ。クローンする：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git clone https://aur.archlinux.org/rbenv.git
</code></pre></div></div>

<p>インストール：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd </span>rbenv
<span class="nv">$ </span>makepkg <span class="nt">-sirc</span>
</code></pre></div></div>

<p>参考文献：<a href="https://wiki.archlinux.jp/index.php/Arch_User_Repository">Arch User Repository</a></p>

<h3 id="rbenv-の初期作業">rbenv の初期作業</h3>
<p>次のコマンドを実行して表示される指示に従う：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rbenv init
</code></pre></div></div>

<h3 id="ruby-build-のインストール">ruby-build のインストール</h3>
<p>rbenv のプラグインである ruby-build もインストールする。</p>

<p>まずは <a href="https://github.com/rbenv/ruby-build/wiki#suggested-build-environment">Suggested build environment</a> にある requirement を満たしておく。そしてインストール：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git clone https://github.com/rbenv/ruby-build.git <span class="s2">"</span><span class="si">$(</span>rbenv root<span class="si">)</span><span class="s2">"</span>/plugins/ruby-build
</code></pre></div></div>

<h2 id="ruby-のインストール">Ruby のインストール</h2>
<h3 id="ruby">Ruby</h3>
<p>ruby-build をインストールすることで <code class="language-plaintext highlighter-rouge">rbenv install</code> が使えるようになる。</p>

<p>安定版のリストを確認：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rbenv <span class="nb">install</span> <span class="nt">-l</span>
</code></pre></div></div>

<p>ヴァージョンを選んでインストール（例えば 3.3.0）：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rbenv <span class="nb">install </span>3.3.0
</code></pre></div></div>

<p>使用する Ruby のヴァージョンを選択しておく。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rbenv <span class="nb">local </span>3.3.0  <span class="c"># プロジェクトのディレクトリで実行すると、そのプロジェクトにのみ適用</span>
<span class="c"># もしくは</span>
<span class="nv">$ </span>rbenv global 3.3.0  <span class="c"># デフォルトを設定</span>
</code></pre></div></div>

<h3 id="bundler">Bundler</h3>
<p>パッケージ管理を行う Bundler をインストールする：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rbenv <span class="nb">exec </span>gem <span class="nb">install </span>bundler
<span class="nv">$ </span>rbenv <span class="nb">exec </span>bundle <span class="nt">--version</span>
</code></pre></div></div>

<h2 id="プロジェクトのセットアップ">プロジェクトのセットアップ</h2>

<p>システムに Bundler がインストールされていない場合は <code class="language-plaintext highlighter-rouge">bundle</code> コマンドに <code class="language-plaintext highlighter-rouge">rbenv exec</code> を付ける必要はないらしい。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rbenv <span class="nb">exec </span>bundle init
<span class="c"># システムに Bundler がインストールされて「いない」場合は下でも可：</span>
<span class="nv">$ </span>bundle init
</code></pre></div></div>

<p>Gemfile が生成されるので、必要なパッケージを書いてインストール。まずはインストール場所を指定しておく（一度だけ実行すればよい）：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># gem はこのプロジェクトのみにインストール。vendor/bundle ディレクトリが生成される</span>
<span class="nv">$ </span>rbenv <span class="nb">exec </span>bundle config <span class="nb">set </span>path <span class="s1">'vendor/bundle'</span>
</code></pre></div></div>

<p>gem をインストールする：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rbenv <span class="nb">exec </span>bundle <span class="nb">install</span>
</code></pre></div></div>

<p>ネットでは <code class="language-plaintext highlighter-rouge">rbenv exec bundle install --path=vendor/bundle</code> コマンドが紹介されていた。しかし、これを実行すると上の通りに改めよと警告される。将来的に <code class="language-plaintext highlighter-rouge">--path</code> フラグは使えなくなるようだ。</p>

<h2 id="rbenv-のアップデート">rbenv のアップデート</h2>
<p>rbenv のアップデート方法についてもまとめる。</p>

<ul>
  <li>rbenv 自体は rbenv の レポジトリを pull し、再度インストールすればよい：
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd</span> /path/to/rbenv
<span class="nv">$ </span>git pull
<span class="nv">$ </span>makepkg <span class="nt">-sirc</span>
</code></pre></div>    </div>
  </li>
  <li>ruby-build：
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git clone https://github.com/rbenv/ruby-build.git <span class="s2">"</span><span class="si">$(</span>rbenv root<span class="si">)</span><span class="s2">"</span>/plugins/ruby-build
</code></pre></div>    </div>
  </li>
</ul>]]></content><author><name>今月の新刊（@skrbcr）</name></author><category term="programming" /><summary type="html"><![CDATA[Ruby の最新版が必要になり調べていたところ、Ruby 環境を管理する rbenv を知ったのでインストールした。]]></summary></entry><entry><title type="html">動画投稿：【東方MMD】発売! パチュリーの匂い缶詰</title><link href="https://skrbcr.github.io/blog/movie/movie_patchouli_and_patchouli" rel="alternate" type="text/html" title="動画投稿：【東方MMD】発売! パチュリーの匂い缶詰" /><published>2023-11-29T00:00:00+09:00</published><updated>2023-11-29T00:00:00+09:00</updated><id>https://skrbcr.github.io/blog/movie/movie_patchouli_and_patchouli</id><content type="html" xml:base="https://skrbcr.github.io/blog/movie/movie_patchouli_and_patchouli"><![CDATA[<p>ニコニコ動画にて<a href="https://www.nicovideo.jp/watch/sm43083830">動画</a>を投稿しました。</p>

<h2 id="使用作品目録">使用作品目録</h2>
<p>使わせていただいた素材作品の紹介です。</p>

<h3 id="mmdモデル">MMDモデル</h3>
<h4 id="キャラクター">キャラクター</h4>
<ul>
  <li>パチュリー・ノーレッジ Ver.2.00 Rev.B Type-C(フル_おさげ_ケープ_ロンスカ_ブーツA_パンプス_あずき)：アールビット<a href="https://commons.nicovideo.jp/works/im8313020">ニコニコ</a> <a href="https://bowlroll.net/file/171703">DL元</a></li>
  <li>レミリア・スカーレット：Kanata/anek/eto/キングM/Cresato/DeviantArt - YamiSweet/Montecore/雪萱 <a href="https://bowlroll.net/file/238262">DL元</a></li>
  <li>十六夜咲夜 Ver.2.20 Rev.G Type-E(ダンス_上着A_膝丈スカート_パンプス)：アールビット <a href="https://commons.nicovideo.jp/works/im6840567">ニコニコ</a> <a href="https://bowlroll.net/file/141058">DL元</a></li>
  <li>小悪魔 アールビット式りとばな風改変+翼等変更モデル(こあ)：アールビット/モンテコア/HVP/nya/ココア/iRon0129/切な顔P/りとばな/小悪魔らぼらとりー/remii/あい <a href="https://commons.nicovideo.jp/works/im7934536">ニコニコ</a> <a href="https://bowlroll.net/file/160746">DL元</a></li>
  <li>FL改_博麗霊夢_v1.00 春：cham/モンテコア/かきすけ/フリック <a href="https://commons.nicovideo.jp/works/sm30356135">ニコニコ</a> <a href="https://bowlroll.net/file/124738">DL元</a></li>
  <li>FL改_霧雨魔理沙_v1.60 (茨)：cham/kaoru/かきすけ/T.M/なつか/フリック <a href="https://commons.nicovideo.jp/works/im6146103">ニコニコ</a> <a href="https://bowlroll.net/file/116163">DL元</a></li>
  <li>紅美鈴 Ver.2.10 Rev.B Type-C(フル_ロングヘア_半袖_膝丈_パンプス)：アールビット <a href="https://commons.nicovideo.jp/works/sm27899799">ニコニコ</a> <a href="https://bowlroll.net/file/242486">DL元</a></li>
  <li>フランドール・スカーレット：Kanata/anek/eto/キングM/Cresato/DeviantArt - YamiSweet/Montecore/雪萱 <a href="https://bowlroll.net/file/238263">DL元</a></li>
  <li>人里モブセット v1.1：ニクムニ <a href="https://commons.nicovideo.jp/works/im4449956">ニコニコ</a> <a href="http://ux.getuploader.com/2962mmd/">DL元</a></li>
</ul>

<h4 id="ステージ">ステージ</h4>
<ul>
  <li>人里ver0.77：鯖缶 <a href="https://commons.nicovideo.jp/works/im4355721">ニコニコ</a> <a href="https://bowlroll.net/file/53168">DL元</a></li>
  <li>紅魔館　ver1.0版：フレスベルク <a href="https://commons.nicovideo.jp/works/sm22298599">ニコニコ</a> <a href="https://bowlroll.net/file/27587">DL元</a></li>
  <li>紅魔館図書館　ver1.0版：フレスベルク <a href="https://commons.nicovideo.jp/works/sm22298599">ニコニコ</a> <a href="https://bowlroll.net/file/27588">DL元</a></li>
</ul>

<h4 id="静物">静物</h4>
<ul>
  <li>段ボール箱：ejima <a href="https://commons.nicovideo.jp/works/im2664887">ニコニコ</a> <a href="https://bowlroll.net/file/11799">DL元</a></li>
  <li>洋風日傘（桃・黃）：智沙都 <a href="https://commons.nicovideo.jp/works/im5110399">ニコニコ</a> <a href="https://bowlroll.net/file/77990">DL元</a></li>
  <li>イベント用テーブル：ぐず <a href="https://commons.nicovideo.jp/works/im4256284">ニコニコ</a> <a href="https://bowlroll.net/file/45534">DL元</a></li>
  <li>M1 MacBook Pro (2021 16 Inch) Ver0.1 Silver：S.Aikawa <a href="https://3d.nicovideo.jp/works/td85034">ニコニコ</a> <a href="https://3d.nicovideo.jp/works/td85034">DL元</a></li>
  <li>椅子：88 <a href="https://bowlroll.net/file/69690">DL元</a></li>
  <li>揺らぐろうそく、燭台と共に：hiro K <a href="https://commons.nicovideo.jp/works/im5166776">ニコニコ</a> <a href="https://bowlroll.net/file/87124">DL元</a></li>
  <li>いろんなダミー剛体 箱G1：Rui <a href="https://commons.nicovideo.jp/works/im4821098">ニコニコ</a> <a href="https://bowlroll.net/file/68242">DL元</a></li>
  <li>魔導書(開)、魔導書ページめくりモーションと共に：アールビット <a href="https://commons.nicovideo.jp/works/im8313020">ニコニコ</a> <a href="https://bowlroll.net/file/171703">DL元</a></li>
  <li>ぞうさんじょうろ：森の民やむぅ <a href="https://commons.nicovideo.jp/works/im9605109">ニコニコ</a> <a href="https://bowlroll.net/file/206447">DL元</a></li>
  <li>可動式八卦炉 ver1.35：ネムネコ <a href="https://commons.nicovideo.jp/works/im6209252">ニコニコ</a> <a href="https://bowlroll.net/file/118556">DL元</a></li>
</ul>

<h4 id="アクセサリ">アクセサリ</h4>
<ul>
  <li>スカイドームいろいろ詰め合わせ 青空_山つき（http://ryntaro-n.anime.coocan.jp/MMD.htm, sm17874820）：額田倫太郎 <a href="https://commons.nicovideo.jp/works/sm17874820">ニコニコ</a> <a href="https://bowlroll.net/file/186281">DL元</a></li>
</ul>

<h4 id="エフェクト">エフェクト</h4>
<ul>
  <li>水面エフェクト (Water v5.6) Water2_low_湖：ビームマン <a href="https://commons.nicovideo.jp/works/sm21437138">ニコニコ</a> <a href="https://w.atwiki.jp/beamman/">DL元</a></li>
  <li>超高品質セルフシャドウエフェクト ExcellentShadow2 (Ver.2.4), ExShadowSSAO：そぼろ <a href="https://commons.nicovideo.jp/works/sm19123817">ニコニコ</a> <a href="https://onedrive.live.com/?authkey=Arbitrary&amp;id=EF581C37A4524EDA%21107&amp;cid=EF581C37A4524EDA">DL元</a></li>
  <li>AutoLuminous Ver.4.2：そぼろ <a href="https://commons.nicovideo.jp/works/sm16087751">ニコニコ</a> <a href="https://onedrive.live.com/?authkey=Arbitrary&amp;id=EF581C37A4524EDA%21107&amp;cid=EF581C37A4524EDA">DL元</a></li>
  <li>空気遠近エフェクト：化身バレッタ <a href="https://commons.nicovideo.jp/works/im4505494">ニコニコ</a> <a href="https://bowlroll.net/file/26250">DL元</a></li>
</ul>

<h3 id="フォント">フォント</h3>
<ul>
  <li>源ノ角ゴシック：Adobe</li>
  <li>衡山毛筆フォント行書：武蔵システム</li>
</ul>

<h3 id="音楽">音楽</h3>
<h4 id="bgm">BGM</h4>
<ul>
  <li>ラクトガール　～ 少女密室　日常的BGM（nc130262）：そぼろ <a href="https://commons.nicovideo.jp/works/nc130262">ニコニコ</a></li>
  <li>チャイコフスキー：組曲《くるみ割り人形》 Op.71aより 第3曲“こんぺい糖の踊り”：クラシック名曲サウンドライブラリー（http://classical-sound.seesaa.net/） <a href="http://classical-sound.seesaa.net/article/215433975.html">DL元</a></li>
  <li>ビゼー：歌劇《カルメン》 前奏曲 [2019][AR]：クラシック名曲サウンドライブラリー（http://classical-sound.seesaa.net/） <a href="http://classical-sound.seesaa.net/article/472021095.html">DL元</a></li>
  <li>Locked in her Embrace【ラクトガール】（nc272097）：しおーる <a href="https://commons.nicovideo.jp/works/nc272097">ニコニコ</a></li>
  <li>PeriTune：Piano_Melancholy <a href="https://peritune.com/blog/2016/07/05/piano_melancholy/">DL元</a></li>
</ul>

<h4 id="se">SE</h4>
<ul>
  <li>OtoLogic：フレーズ02、オノマトペ　チーン03、スイング01 <a href="https://otologic.jp/">HP</a></li>
  <li>効果音ラボ：和太鼓でドン、和太鼓でドドン、煙モクモク、時計塔内部 <a href="https://commons.nicovideo.jp/works/nc133519">ニコニコ 和太鼓でドン</a> <a href="https://commons.nicovideo.jp/works/nc133520">ニコニコ 和太鼓でドドン</a> <a href="https://commons.nicovideo.jp/works/nc278990">ニコニコ 時計塔内部</a> <a href="https://soundeffect-lab.info/">HP</a></li>
</ul>

<h3 id="ソフトウェア">ソフトウェア</h3>
<ul>
  <li>樋口優：MikuMikuDance</li>
  <li>舞力介入P：MikuMikuEffect</li>
  <li>饅頭遣い：YukkuriMovieMaker4</li>
  <li>アクエスト：AquesTalk</li>
  <li>ＫＥＮくん：AviUtl</li>
  <li>rigaya：拡張 x264 出力(GUI) Ex</li>
</ul>

<h2 id="感想">感想</h2>
<p>本動画を作った感想です。</p>

<h3 id="良かった点">良かった点</h3>
<ul>
  <li>完成させた</li>
  <li>1本動画を作る中で MMD に慣れることができた</li>
  <li>作りながら効率を上げられた</li>
  <li>テンポは悪くなかったと思う</li>
</ul>

<h3 id="悪かった点">悪かった点</h3>
<ul>
  <li>ほとんど紙芝居？　MMD ドラマ仕立てにしたかったが、動きが少なかった</li>
  <li>単調な演出。演出の引き出しを増やしたい。。</li>
  <li>キャラクターの動きが少ない。もうちょっと動かした方が自然な気がする</li>
  <li>口調の書き分けができていない気がする</li>
  <li>脚本を書く前に十分にキャラクター設定（立場や考えていること）ができていなかった。結果、キャラクターの心情を反映した演出ができなかった</li>
  <li>シナリオのテンポが速すぎた気もする。正直よく分からない</li>
</ul>

<h3 id="その他の点">その他の点</h3>
<ul>
  <li>二番煎じが怖いという感覚を理解した</li>
  <li>東方にとても詳しいのではないので、公式設定との兼ね合いが不安</li>
</ul>]]></content><author><name>今月の新刊（@skrbcr）</name></author><category term="movie" /><summary type="html"><![CDATA[ニコニコ動画にて動画を投稿しました。]]></summary></entry><entry><title type="html">Jekyll のインストール（WSL・Linux の場合）</title><link href="https://skrbcr.github.io/blog/manage/install_jekyll_linux" rel="alternate" type="text/html" title="Jekyll のインストール（WSL・Linux の場合）" /><published>2023-11-26T00:00:00+09:00</published><updated>2023-11-26T00:00:00+09:00</updated><id>https://skrbcr.github.io/blog/manage/install_jekyll_linux</id><content type="html" xml:base="https://skrbcr.github.io/blog/manage/install_jekyll_linux"><![CDATA[<p><a href="https://skrbcr.github.io/blog/manage/setup_pages">以前の記事</a>の Linux 版です。</p>

<h2 id="実行環境">実行環境</h2>

<table>
  <thead>
    <tr>
      <th style="text-align: center">ソフト</th>
      <th style="text-align: center">バージョン</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">OS</td>
      <td style="text-align: center">Windows 11 Home 23H2</td>
    </tr>
    <tr>
      <td style="text-align: center">WSL</td>
      <td style="text-align: center">2.0.9.0</td>
    </tr>
    <tr>
      <td style="text-align: center">Linux</td>
      <td style="text-align: center">Arch Linux</td>
    </tr>
    <tr>
      <td style="text-align: center">Ruby</td>
      <td style="text-align: center">3.0.6p216</td>
    </tr>
    <tr>
      <td style="text-align: center">Jekyll</td>
      <td style="text-align: center">4.2.2</td>
    </tr>
  </tbody>
</table>

<h2 id="作業の流れ">作業の流れ</h2>
<ol>
  <li>Ruby と Bundler をインストール</li>
  <li>Jekyll のインストール</li>
</ol>

<h2 id="ruby-と-bundler-をインストール">Ruby と Bundler をインストール</h2>
<p>まずは Ruby。各OS 毎のインストールコマンドが <a href="https://jekyllrb.com/docs/installation/other-linux/">docs</a> に掲載されている。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>pacman <span class="nt">-S</span> ruby base-devel
</code></pre></div></div>

<p>次に Bundler。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gem <span class="nb">install </span>bundler
</code></pre></div></div>

<p>そして環境変数の設定。<a href="https://jekyllrb.com/docs/installation/ubuntu/">docs</a> に従う。私は fish を使用しているので <code class="language-plaintext highlighter-rouge">config.fish</code> に以下を追記する。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set</span> <span class="nt">-gx</span> PATH <span class="nv">$PATH</span> <span class="nv">$HOME</span>/.local/share/gem/ruby/3.0.0/bin
<span class="nb">set</span> <span class="nt">-gx</span> GEM_HOME <span class="nv">$HOME</span>/gems
</code></pre></div></div>

<h2 id="jekyll-のインストール">Jekyll のインストール</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gem <span class="nb">install </span>jekyll
</code></pre></div></div>

<p>最後にインストールされたことを確認：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>bundle <span class="nt">--version</span>
<span class="nv">$ </span>jekyll <span class="nt">--version</span>
</code></pre></div></div>

<p>以下、プロジェクトの作成からは <a href="https://skrbcr.github.io/blog/manage/setup_pages#jekyll-で新しいプロジェクトの作成設定">Windowsのとき</a>と同じ。</p>]]></content><author><name>今月の新刊（@skrbcr）</name></author><category term="manage" /><summary type="html"><![CDATA[以前の記事の Linux 版です。]]></summary></entry><entry><title type="html">連想記憶モデル（Hopfield network）の実装</title><link href="https://skrbcr.github.io/blog/physics/associative_memory" rel="alternate" type="text/html" title="連想記憶モデル（Hopfield network）の実装" /><published>2023-11-22T00:00:00+09:00</published><updated>2023-11-22T00:00:00+09:00</updated><id>https://skrbcr.github.io/blog/physics/associative_memory</id><content type="html" xml:base="https://skrbcr.github.io/blog/physics/associative_memory"><![CDATA[<p>（一応 physics ジャンルの投稿です）</p>

<p>（細かい話に興味ない人は「原理」の節を飛ばしてください）</p>

<h2 id="投稿の概要">投稿の概要</h2>
<p>連想記憶モデル（Hopfield model）は人工知能（AI）の一種で、情報の記憶、取り出しを行うことができる。以下で述べるように、不鮮明な入力から記憶した情報を思い出すことができる。本投稿は連想記憶モデルの原理について述べ、簡単な実験を行えるプログラムを紹介する。実験結果についても簡単に述べる。なお、"Statistical Physics of Spin Glasses and Information Processing An Introduction" by Hidetoshi Nishimori<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> を参考文献としてお送りする。</p>

<h2 id="連想記憶モデルとは">連想記憶モデルとは？</h2>
<p>連想記憶モデル（Hopfield network）は情報の記憶・思い出しを行うニューラルネットワーク。例えば、1000枚の画像をこのネットワークに記憶させる。次に、1000枚の中から1枚を選び、それにノイズをのせた画像を用意する。そして、その画像をネットワークに入力すると、徐々に元の画像が再現される。この思い出しは常に成功するのではなく、条件を満たす必要がある。</p>

<center>
<iframe width="560" height="315" src="https://www.youtube.com/embed/UE2mZNWXd-A?si=IULMuAeYakfd99YU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>
<p>画像を思い出す様子</p>
</center>

<p>連想記憶は脳が記憶したり思い出したりする仕組みを参考に構築されている。そのため、各記憶素子を「ニューロン」と呼ぶ。実際の脳のニューロンは発火したりしなかったりすることで情報を保持・伝達する。本モデルでもニューロンは発火・非発火により情報の保持・伝達を行う。</p>

<h2 id="原理">原理</h2>
<h3 id="パターンの記憶">パターンの記憶</h3>

<p>記憶するパターン数を $p$ とし、各ニューロンの記憶パターンを ${\xi_i^\mu}$ で表す。$\mu$ 番目の記憶パターンでは $i$ 個目のニューロンが $\xi_i^\mu$ の状態（発火・非発火）を表す：</p>

\[\begin{equation}
    \xi_i^{\mu} = \begin{cases}
        1  &amp; \text{：発火} \\
        -1 &amp; \text{：非発火} \\
    \end{cases}
\end{equation}\]

<p>ニューロン同士の相互作用として次の量$J_{ij}$を定義する。系は$J_{ij}$を計算することで $p$ 個のパターンがネットワークを記憶（埋め込み）する：</p>

\[\begin{equation}
    J_{ij} = \frac{1}{N} \sum_{\mu = 1}^{p} \xi_i^\mu \xi_j^\mu
\end{equation}\]

<p>$N$ はニューロンの個数。$J$ は $N\times N$ の行列。また、$J_{ii} = 0$ とする。</p>

<h3 id="ニューロン間のやりとり">ニューロン間のやりとり</h3>

<p>ニューロン同士は情報のやり取りを行うことで記憶したものを思い出す。あるニューロンの状態は他のニューロンの状態により決まる。ニューロン $i$ がニューロン $j$ から受け取る信号の大きさを次のように決める：</p>

\[\begin{equation}
    J_{ij}(S_j + 1) = \begin{cases}
        2J_{ij} &amp; :~S_j = +1 \\
        0       &amp; :~S_j = -1 \\
    \end{cases}
\end{equation}\]

<p>こうすると良い理由は後述。すると、ニューロン $i$ に入ってくる信号の和 $h_i$ は</p>

\[\begin{equation}
    h_i = \sum_{j = 1}^{N} J_{ij}(S_j + 1)
\end{equation}\]

<p>ニューロン $i$ は入力の和があるしきい値 $\theta_i$ を超えるときに発火、そうでなければ非発火とする：</p>

\[\begin{align}
    S_i(t + \Delta t) &amp;= \mathrm{sgn}(h_i - \theta_i) \nonumber\\
                      &amp;= \mathrm{sgn}\left(\sum_{j = 1}^{N} J_{ij}(S_j + 1) - \theta_i\right)
\end{align}\]

<p>ここで $\mathrm{sgn}(\cdot)$ は符号関数。簡単のために、$\theta_i = J_{ij}$ として</p>

\[\begin{equation}
    S_i(t + \Delta t) = \mathrm{sgn}\left(\sum_{j = 1}^{N} J_{ij}S_j(t)\right)
\end{equation}\]

<h3 id="思い出し">思い出し</h3>
<p>ここまで、ニューロンを使った記憶の方法・情報のやり取りの方法を説明した。この方法で本当に上手くいくのか？　上手くいくことを確認する。</p>

<p>思い出すとは、記憶したパターンに近いものを与えられたとき、元のパターンを復元できること。まずは、与えられるニューロンパターンが $\mu$ 番目パターンそのものの場合を考える。時刻 $t$ でニューロンたちが $\mu$ 番目のパターンそのものであるとき、時刻 $t + \Delta t$ では</p>

\[\begin{align}
    S_i (t + \Delta t) &amp;= \mathrm{sgn}\left(\sum_{j = 1}^{N} J_{ij}S_j(t)\right) \nonumber\\
                       &amp;= \mathrm{sgn}\left(\sum_{j = 1}^{N} J_{ij}\xi_j^\mu\right) \nonumber\\
                       &amp;= \mathrm{sgn}\left(\sum_{j = 1}^{N} \frac{1}{N}\sum_{\nu = 1}^p \xi_i^\nu \xi_j^\nu \xi_j^\mu\right) \nonumber\\
                       &amp;= \mathrm{sgn}\left(\sum_{\nu = 1}^p \xi_i^\nu \frac{1}{N} \sum_{j = 1}^{N} \xi_j^\nu \xi_j^\mu\right)
\end{align}\]

<p>ここで</p>

\[\begin{equation}
    \frac{1}{N} \sum_{j = 1}^{N} \xi_j^\nu \xi_j^\mu
\end{equation}\]

<p>は、$\mu = \nu$ のときは 1、$\mu \neq \nu$ のときは $N$ が十分大きければ 0 になりそう。なので、この部分はクロネッカーのデルタ $\delta_{\nu,\mu}$ になる。</p>

\[\begin{align}
    S_i (t + \Delta t) &amp;= \mathrm{sgn}\left(\sum_{\nu = 1}^p \xi_i^\nu \delta_{\nu,\mu}\right) \nonumber\\
                       &amp;= \mathrm{sgn}(\xi_i^\mu) \nonumber\\
                       &amp;= \xi_i^\mu 
\end{align}\]

<p>確かに、時刻 $t + \Delta t$ でも系の状態はパターン $\mu$ のままであった。</p>

<p>次に、与えられるパターンがパターン $\mu$ から少しだけずれているときを考える。これは、系のエネルギーから定性的に説明できる。ニューロン $i$ に関して、入力信号 $h_i$ と状態 $S_i$ の積を考えると</p>

\[\begin{align}
    -h_iS_i &amp;= -\sum_j J_{ij}(S_j + 1) S_i \nonumber\\
            &amp;= -\sum_j J_{ij}S_iS_j + const. \times S_i
\end{align}\]

<p>全ての $i$ について和をとれば</p>

\[\begin{equation}
    H = -\frac{1}{2}\sum_{i,j} J_{ij}S_iS_j
\end{equation}\]

<p>ただし、定数部分は適当。この $H$ に関して次のことがわかる：</p>

<ul>
  <li>$H$ は Ising model の Hamiltonian</li>
  <li>ひとつのニューロンに関して、入力信号と状態が等しいときエネルギーは小さく、異なるときエネルギーは大きくなる</li>
  <li>系の状態がパターンの状態と等しいとき、エネルギーは極小（各ニューロン、入力 $h_i$ と状態 $S_i$ は等しくなっているので）</li>
</ul>

<p>従って、系の状態がパターン $\mu$ から少し異なるとき、エネルギーが極小に落ち込むように、パターン $\mu$ に近づいていく。</p>

<p>以上により、連想記憶モデルは記憶と思い出しが行えることがわかった。</p>

<h2 id="実装">実装</h2>
<p><a href="https://github.com/skrbcr/toybox/tree/main/Hopfield_network">GitHub</a> で公開している。</p>

<p>ここでは簡単に、記憶パートと思い出しパートを取り出して説明する。とはいえ、どちらも行列・ベクトルの計算をするだけで、それには <a href="https://www.boost.org/">Boost C++ Library</a> の <code class="language-plaintext highlighter-rouge">boost::numeric::ublas</code> を用いた。</p>

<p><strong>記憶</strong></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define sgn(x) (x &gt;= 0 ? 1 : -1)  // 符号関数
</span>
<span class="n">std</span><span class="o">::</span><span class="n">mt19937</span> <span class="nf">engine</span><span class="p">(</span><span class="mi">12345</span><span class="p">);</span>  <span class="c1">// 乱数生成器</span>

<span class="n">boost</span><span class="o">::</span><span class="n">numeric</span><span class="o">::</span><span class="n">ublas</span><span class="o">::</span><span class="n">matrix</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">J</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>  <span class="c1">// J 行列</span>
<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">numeric</span><span class="o">::</span><span class="n">ublas</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">xi</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">ublas</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">n</span><span class="p">));</span>  <span class="c1">// p個のパターン ξ ベクトル</span>

<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">mu</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">mu</span> <span class="o">&lt;</span> <span class="n">p</span><span class="p">;</span> <span class="o">++</span><span class="n">mu</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// p個のパターンに対して</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">mu</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">xi</span><span class="p">[</span><span class="n">mu</span><span class="p">](</span><span class="n">i</span><span class="p">)</span> <span class="o">=</span> <span class="n">sgn</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">engine</span><span class="p">());</span>  <span class="c1">// (p - 1)個のパターンをランダム生成</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">i</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// 行列の下三角だけ埋める</span>
            <span class="n">J</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="o">+=</span> <span class="n">xi</span><span class="p">[</span><span class="n">mu</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">xi</span><span class="p">[</span><span class="n">mu</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>  <span class="c1">// ξ_i^μ × ξ_j^μ</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="n">J</span> <span class="o">/=</span> <span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="n">n</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="n">J</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">=</span> <span class="n">J</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>  <span class="c1">// 行列の上半分は下半分のコピー（J_ij = J_ji）</span>
</code></pre></div></div>

<p><strong>思い出し</strong></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">boost</span><span class="o">::</span><span class="n">numeric</span><span class="o">::</span><span class="n">ublas</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">s</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="n">stemp</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>  <span class="c1">// s: 入力（元画像にノイズがのったもの）; stemp: 計算の途中結果を一次保存</span>

<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="n">duration</span><span class="p">;</span> <span class="o">++</span><span class="n">t</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// sgn(J * s)</span>
    <span class="n">stemp</span> <span class="o">=</span> <span class="n">ublas</span><span class="o">::</span><span class="n">prod</span><span class="p">(</span><span class="n">J</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>  
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="n">s</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">=</span> <span class="n">sgn</span><span class="p">(</span><span class="n">stemp</span><span class="p">(</span><span class="n">i</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="結果">結果</h2>
<p>下の画像と、ランダム生成される $p - 1$ 枚の画像を記憶させる（サイズ：100 x 100）。</p>

<p><img src="/blog/assets/2023-11-01-associative_memory/github.png" alt="記憶する画像" title="記憶する画像" /></p>

<p>思い出す画像は、この画像である。画像にノイズをのせてAI に与える。パターン数 $p$ と一致率 $r_n$（$1 - $(ノイズ比率)）を変えて思い出せるかどうかの実験を行った。</p>

<ul>
  <li>$p = 100, n_r = 0.6$</li>
</ul>
<center><video controls="" src="/blog/assets/2023-11-01-associative_memory/p100_n40.mp4" width="50%"></video></center>
<p>あっという間に、完全に画像を復元できた。</p>

<ul>
  <li>$p = 1000, n_r = 0.75$</li>
</ul>
<center><video controls="" src="/blog/assets/2023-11-01-associative_memory/p1000_n25.mp4" width="50%"></video></center>
<p>パターン数を増やすと、再現はできているものの若干のノイズが残る。</p>

<ul>
  <li>$p = 1000, n_r = 0.65$</li>
</ul>
<center><video controls="" src="/blog/assets/2023-11-01-associative_memory/p1000_n35.mp4" width="50%"></video></center>
<p>同じくパターン数1000だが一致率を下げた。すると、再現できなくなった。</p>

<ul>
  <li>$p = 3000, n_r = 0.95$</li>
</ul>
<center><video controls="" src="/blog/assets/2023-11-01-associative_memory/p3000_n5.mp4" width="50%"></video></center>
<p>パターン数を増やしていくと、高い一致率の画像を与えても再現できなくなった。ノイズは減るどころか増えている。</p>

<p>どれくらいのパターン数を埋め込めるのかは、数値計算で特定されている。パターン数 $p$ とニューロン数 $N$ の比率 $\alpha = p / N$ が 0.138 を超えると画像の再現ができなくなるらしい。一致率の方はどういう研究がされているのか、残念ながら知らないです。。</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>電子版は<a href="https://sites.google.com/view/nishimori/open_access_books">著者の先生のHP のページ</a>より無料DL できます <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>今月の新刊（@skrbcr）</name></author><category term="physics" /><summary type="html"><![CDATA[（一応 physics ジャンルの投稿です）]]></summary></entry><entry><title type="html">AtCoder 緑色になりました</title><link href="https://skrbcr.github.io/blog/programming/atcoder_green" rel="alternate" type="text/html" title="AtCoder 緑色になりました" /><published>2023-10-20T00:00:00+09:00</published><updated>2023-10-20T00:00:00+09:00</updated><id>https://skrbcr.github.io/blog/programming/atcoder_green</id><content type="html" xml:base="https://skrbcr.github.io/blog/programming/atcoder_green"><![CDATA[<p><a href="https://skrbcr.github.io/blog/programming/atcoder_brown">前回</a>のあらすじ：茶色くなりました</p>

<h2 id="入緑">入緑</h2>
<p>AtCoder のランクが緑になりました。わーい。緑くなるまでの経緯を書きます。</p>

<p><img src="/blog/assets/2023-09-10-atcoder_green/graph.png" alt="レートグラフ" /></p>

<h2 id="私について">私について</h2>
<ul>
  <li><a href="https://atcoder.jp/users/skrbcr">AtCoder アカウント</a></li>
  <li>大学生。非情報系</li>
  <li>使用言語：C++</li>
</ul>

<h2 id="勉強方法">勉強方法</h2>
<p>いつもお世話になっている記事、<a href="https://qiita.com/e869120/items/eb50fdaece12be418faa">レッドコーダーが教える、競プロ・AtCoder上達のガイドライン【中級編：目指せ水色コーダー！】</a>に従って勉強しました。記事では緑コーダーになるには？　は書いていませんが、茶色→水色への指針が書かれています。</p>

<h3 id="新たに学んだ内容">新たに学んだ内容</h3>
<p>蛇足な感もありますが、上の記事に倣って勉強したアルゴリズムなどを列挙します。他に参考になったページも掲げます。</p>
<ul>
  <li>深さ優先探索（DFS）：改めて勉強した。<a href="https://qiita.com/drken/items/4a7869c5e304883f539b">DFS (深さ優先探索) 超入門！ 〜 グラフ・アルゴリズムの世界への入口 〜【前編】</a>はグラフの基礎も学べる。<a href="https://qiita.com/drken/items/a803d4fc4a727e02f7ba">DFS (深さ優先探索) 超入門！ 〜 グラフ・アルゴリズムの世界への入口 〜【後編】</a>：発展的な内容が多いが面白かった</li>
  <li>幅優先探索（BFS）：上に同じ。<a href="https://qiita.com/drken/items/996d80bcae64649a6580">BFS (幅優先探索) 超入門！ 〜 キューを鮮やかに使いこなす 〜</a>がBFS 版の記事</li>
  <li>動的計画法：ナップザックDPの簡単なのだけ。記事で紹介されているものではなく<a href="https://qiita.com/drken/items/dc53c683d6de8aeacf5a">動的計画法超入門！ Educational DP Contest の A ～ E 問題の解説と類題集</a>を読んだり解いたりした</li>
  <li>高速な素数判定法：実は既に灰～茶色の時点で学習済み。ライブラリを作っています。<a href="https://qiita.com/drken/items/a14e9af0ca2d857dad23">AtCoder 版！マスター・オブ・整数 (素因数分解編)</a>が参考になる。なお、まだ全て読めていない</li>
  <li>いくつかの STL：<code class="language-plaintext highlighter-rouge">gcd</code>, <code class="language-plaintext highlighter-rouge">stack</code>, <code class="language-plaintext highlighter-rouge">pair</code></li>
</ul>

<p>動的計画法（ナップザックDP）の勉強にほとんどの時間を費やしました。ここまでで一番習得が大変そうです<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">1</a></sup>。</p>

<h3 id="過去問練習">過去問練習</h3>
<p>茶色後半のとき、コンテスト本番、B問題などでつまづく重大インシデントが多発しました。この頃は灰diff はほとんど解いていませんでした。これが仇をなしていると考え、速く正確に解く練習を始めました。方法は、過去問各回を、A から茶diff問題までを時間を測って解く、です。実際のコンテストでは練習の感覚を頼りに、焦らず丁寧に素早く解くようにします。まだこの方法が良いのかはっきりとした結果は見えていないので、後日追記します。</p>

<p>より難しい問題については、上の早解き練習で掛けた時間を$x$ 分としたとき、$(100 - x)$ 分の時間で解くということをしています<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">2</a></sup>。</p>

<h2 id="その他">その他</h2>
<ul>
  <li>ノートは結構効果があるので続けています（入茶記事参照）</li>
  <li>自分とレート 1000↑ の人たちが同じ色というのに違和感があります。。</li>
  <li>ラーメン食べたい</li>
</ul>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:2" role="doc-endnote">
      <p>まだ理解途上です <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:1" role="doc-endnote">
      <p>夏休みなので時間が多いのです <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>今月の新刊（@skrbcr）</name></author><category term="programming" /><summary type="html"><![CDATA[前回のあらすじ：茶色くなりました]]></summary></entry><entry><title type="html">AtCoder 茶色になりました</title><link href="https://skrbcr.github.io/blog/programming/atcoder_brown" rel="alternate" type="text/html" title="AtCoder 茶色になりました" /><published>2023-08-16T00:00:00+09:00</published><updated>2023-08-16T00:00:00+09:00</updated><id>https://skrbcr.github.io/blog/programming/atcoder_brown</id><content type="html" xml:base="https://skrbcr.github.io/blog/programming/atcoder_brown"><![CDATA[<h2 id="入茶">入茶</h2>
<p>しばらく前に<a href="https://skrbcr.github.io/blog/programing/begin_atcoder">AtCoder を始め</a>、先日ランクが茶色になりました。入茶までにしたことや、現在の私のプログラミング能力について書きます。</p>

<p><img src="/blog/assets/2023-08-13-atcoder_brown/graph.png" alt="レートグラフ" title="レートグラフ" /></p>

<h3 id="私について">私について</h3>
<ul>
  <li><a href="https://atcoder.jp/users/skrbcr">AtCoder アカウント</a></li>
  <li>大学生。非情報系</li>
  <li>使用言語：C++</li>
  <li>登録時のプログラミング能力：2年ほど遊びと大学の課題でプログラミングに触れてきた。しかし特段上達した気はしない。基礎文法はだいたい理解していたと思う</li>
</ul>

<p>1~2ヶ月で入茶していますが、これは単純に2年間（競プロでないにしても）プログラミングに触れていた貯金が為です。</p>

<h2 id="勉強方法">勉強方法</h2>
<p>前回言及した<a href="https://qiita.com/e869120/items/f1c6f98364d1443148b3">レッドコーダーが教える、競プロ・AtCoder上達のガイドライン【初級編：競プロを始めよう】 | Qiita</a>に従って勉強しました。</p>

<h3 id="内容">内容</h3>
<p>前回の記事以降、次の内容を学習しました：</p>

<ul>
  <li>全探索：<a href="https://qiita.com/e869120/items/25cb52ba47be0fd418d6#3-%E7%A8%AE%E3%80%85%E3%81%AE%E5%85%A8%E6%8E%A2%E7%B4%A2bit%E5%85%A8%E6%8E%A2%E7%B4%A2%E9%A0%86%E5%88%97%E5%85%A8%E6%8E%A2%E7%B4%A2%E3%81%AA%E3%81%A9">たのしい探索アルゴリズムの世界【前編：全探索、bit全探索から半分全列挙まで】</a> が勉強になりました
    <ul>
      <li>bit 全探索</li>
      <li>順列全探索</li>
      <li>深さ優先探索</li>
      <li>幅優先探索</li>
    </ul>
  </li>
  <li>二分探索：上に同じ
    <ul>
      <li>手で実装</li>
      <li><code class="language-plaintext highlighter-rouge">lower_bound</code> 関数</li>
    </ul>
  </li>
  <li>いくつかの STL：アルゴリズムの勉強や ABC の過去問を解く中で知ったものを学習。<a href="https://qiita.com/e869120/items/eb50fdaece12be418faa">上の記事の中編</a>からチョイスすると↓な感じ
    <ul>
      <li><code class="language-plaintext highlighter-rouge">abs</code>, <code class="language-plaintext highlighter-rouge">sin</code>, <code class="language-plaintext highlighter-rouge">cos</code>, <code class="language-plaintext highlighter-rouge">tan</code>, <code class="language-plaintext highlighter-rouge">string</code>, <code class="language-plaintext highlighter-rouge">min</code>, <code class="language-plaintext highlighter-rouge">max</code>, <code class="language-plaintext highlighter-rouge">vector</code>：既に知っていたものたち</li>
      <li><code class="language-plaintext highlighter-rouge">swap</code>, <code class="language-plaintext highlighter-rouge">reverse</code>, <code class="language-plaintext highlighter-rouge">sort</code>, <code class="language-plaintext highlighter-rouge">queue</code>, <code class="language-plaintext highlighter-rouge">map</code>, <code class="language-plaintext highlighter-rouge">set</code>, <code class="language-plaintext highlighter-rouge">lower_bound</code>, <code class="language-plaintext highlighter-rouge">next_permutation</code>：初耳のものたち</li>
    </ul>
  </li>
</ul>

<p>ちなみに、<code class="language-plaintext highlighter-rouge">set</code> を初めて知ったときはあまりの便利さに感動しました。</p>

<h3 id="方法">方法</h3>
<p>学習して知ったことはノート<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>にまとめています。学校でのお勉強の経験上、手を動かすだけで定着が良くなるのと、後で復習できるからです。</p>

<p>上の内容を学習する傍ら、ABC の過去問（A-D 問題のみ）を新しいものから10回分ほど解きました。これは、不足の基礎知識を身につけるのと、ABC の問題に慣れるためです。これだけで問題を解く時間が短くなりパフォーマンスが向上しました。</p>

<p>アルゴリズムの解説記事にはたいてい練習問題も付いているので、できるだけ解くようにしています。手を動かす（略。また、実際に解いてみて、初めて理解できたり勘違いに気づいたりしたことが多かったからです。</p>

<h2 id="その他">その他</h2>
<ul>
  <li>始める前は、競プロは初心者お断り感があると勝手に思っていたのですが、全くそのようなことはなく、寧ろ初心者歓迎の雰囲気があり驚きました。AtCoder 公式から C++ の基礎講座も出てますし</li>
  <li>上に関連して、「AtCoder はインフレを起こしており、茶色になるのがより大変になっている」という話を聞くことがあります。私は初心者なのでその是非は分かりません。しかし、初心者向けの解説記事が充実しているので恐れることはないんじゃないかなーと思っています</li>
</ul>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>ちなみに私は紙のノート派です <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>今月の新刊（@skrbcr）</name></author><category term="programming" /><summary type="html"><![CDATA[入茶 しばらく前にAtCoder を始め、先日ランクが茶色になりました。入茶までにしたことや、現在の私のプログラミング能力について書きます。]]></summary></entry><entry><title type="html">AtCoder はじめました</title><link href="https://skrbcr.github.io/blog/programming/begin_atcoder" rel="alternate" type="text/html" title="AtCoder はじめました" /><published>2023-07-30T00:00:00+09:00</published><updated>2023-07-30T00:00:00+09:00</updated><id>https://skrbcr.github.io/blog/programming/begin_atcoder</id><content type="html" xml:base="https://skrbcr.github.io/blog/programming/begin_atcoder"><![CDATA[<h2 id="atcoder-はじめました">AtCoder はじめました</h2>
<p>AtCoder に<a href="https://atcoder.jp/users/skrbcr">アカウント</a>を作ってコンテストに参加してみました。</p>

<h3 id="はじめた経緯">はじめた経緯</h3>
<p>プログラミングを知って2年半近く場当たり的に独学でやってきたのですが、最近実力が頭打ちになっているのを実感していました。またプログラミングに飽きてきたこともあり、趣向が異なり、勉強も兼ねるようなものに挑んでみたいと考えていました。友人がだいぶ前に AtCoder を始めたと言っていたのを思い出し、自分もやってみようと登録しました。</p>

<h3 id="はじめる前のスペック現在のスペック">はじめる前のスペック≒現在のスペック</h3>
<p>後で見返したときに上達を測れるように、始める前の私のスペックを書いておきます。総じて初心者です：</p>

<ul>
  <li>プログラムに対する理解：変数や if, for, while みたいなのは問題なし</li>
  <li>習得したアルゴリズム：for ループいっぱい書いてとにかく全探索。計算量の概念は知ってるけど面倒なので考えない</li>
  <li>学部学科：非情報系</li>
  <li>言語：C++ は少し, Python はレポートに貼るグラフを作るソフトだと思っている</li>
  <li>作ってきたもの：GitHub やこのブログにあります。真面目に取り組んでいる人から見たら、初心者が頑張って作った感じじゃないかな</li>
</ul>

<h2 id="実際にコンテストに出た感想">実際にコンテストに出た感想</h2>
<p>主に<a href="https://qiita.com/drken/items/fd4e5e3630d0f5859067">AtCoder に登録したら次にやること ～ これだけ解けば十分闘える！過去問精選 10 問 ～ | Qiita</a>、<a href="https://qiita.com/e869120/items/f1c6f98364d1443148b3">レッドコーダーが教える、競プロ・AtCoder上達のガイドライン【初級編：競プロを始めよう】 | Qiita</a>を参考にしました。</p>

<h4 id="出場前">出場前</h4>
<p>登録後、初めてのコンテストまでに AtCoder Beginners Selection を解き、こんな感じかーと雰囲気をチラ見しました。</p>

<h4 id="初arc">初ARC</h4>
<p>ちょうど登録した日に AtCoder Regular Contest 164 が開催されたので参加してみました。A問題から解けず、提出しても WA か TLE と、散々な結果でした。当面の間は ABC だけ出ようと思いました。</p>

<h4 id="abc-までにやったこと">ABC までにやったこと</h4>
<p>AIZU ONLINE JUDGE (AOJ) に登録し、Introduction to Programing I の1~10 の40問を解きました。プログラミングの基礎は知っているつもりでしたが、知らないことがあり勉強になりました。復習にもなりました。</p>

<h4 id="初abc">初ABC</h4>
<p>AtCoder Beginners Contest 310 に出ました。30分でB問題まで解けましたが、C問題がどうしても TLE。解説を読んで「そんなすごいものがあるのか！」と感動し、アルゴリズムや C++ の勉強を（人生で初めて）真面目にしようと思いました。</p>

<h3 id="目標">目標</h3>
<p>目標はレッドコーダーですが、現実的でないので茶色を目指します。あとは、ABC を本番で4完してみたいですね。夏休みの後半は暇なはずなので、この2つの夏休み中の達成を目標にします！</p>]]></content><author><name>今月の新刊（@skrbcr）</name></author><category term="programming" /><summary type="html"><![CDATA[AtCoder はじめました AtCoder にアカウントを作ってコンテストに参加してみました。]]></summary></entry><entry><title type="html">伊豆（亀石） 天体撮影 2022夏</title><link href="https://skrbcr.github.io/blog/astron/izu_kameishi" rel="alternate" type="text/html" title="伊豆（亀石） 天体撮影 2022夏" /><published>2022-10-30T00:00:00+09:00</published><updated>2022-10-30T00:00:00+09:00</updated><id>https://skrbcr.github.io/blog/astron/izu_kameishi</id><content type="html" xml:base="https://skrbcr.github.io/blog/astron/izu_kameishi"><![CDATA[<center><img src="/blog/assets/2022-10-30-izu_kameishi/andromeda.jpg" alt="アンドロメダ銀河" style="width: 90%;" />
<p>Nikon Z50; Vixen FL55SS鏡筒使用, 180 秒 × 9 枚（1620 秒）, ISO 3200</p>
<p>アンドロメダ銀河（M31）<br />
中央のバルジのみならず、円盤も写っている。とはいえ円盤はぼんやり程度<br />
二つの伴銀河（M32, M110）はばっちり</p><hr style="width: 50%" /></center>

<h2 id="まえがき">まえがき</h2>
<p>9月下旬に伊豆半島で天体撮影を行いました。具合的な場所は伊豆スカイラインの亀石パーキングエリアです。家族がいつの間にか天体望遠鏡を導入していたので、その初陣も兼ねてアンドロメダ銀河の撮影に挑戦しました。</p>

<p>この日は曇りがちの天気で、何度も雲や霧に邪魔されました。日没後数時間たって、ようやくアンドロメダ銀河を写せる状態になりました。待っている間はひたすら車の中なのですが、まあ暇なこと笑　天体撮影にはこういうのもつきものなのでしょうね。</p>

<h2 id="撮影地について">撮影地について</h2>
<p>伊豆スカイラインは伊豆半島の北東部を縦に走る有料道路です。そのパーキングエリアの一つ、亀石PA にて撮影を行いました。伊豆スカイラインのパーキングエリアは数台分の駐車スペースのみあるところも多いようですが、この亀石PA はトイレや自動販売機が完備され、駐車台数も多いです。</p>

<p>撮影環境自体はかなり良好でした。空の暗さでいうと、現地の光害はパーキングエリアのトイレと時々走っている自動車のライトくらいです。これらを上手く避ければ現地の光は問題にならないです。遠くの街の光はというと、さすがに熱海（東）や沼津（西）が近いために、地平線付近はばっちり白ばんでいます。この辺りの天体を狙う場合は要注意だと思います。とはいえ、トイレ・自動販売機・駐車スペースというパーキングエリアの恩恵を受けながら暗い夜空にカメラを向けられる好立地です。</p>

<h2 id="撮影">撮影</h2>
<p>いつのまにか撮影機材がアップグレードしていました。これまでは望遠レンズを用いて撮影していたのですが、今回は望遠鏡が導入されました。Vixen の FL55SS です。家族によると、300 mm 以上の望遠レンズを用いるつもりなら、それよりも望遠鏡を使う方がよい、ので導入したそうです。</p>

<p>今回は上記の通り雲が邪魔する時間が長く、まともに撮影できたのはアンドロメダ銀河のみでした。その写真が冒頭に載せたものです。<a href="jogashima2">前回</a>と比べて、星の数、円盤の写り、周辺減光の少なさ、そのどれもが改善しています。これは主に望遠鏡の使用が理由として大きいのでしょうね。ちなみに、前回のアンドロメダ銀河↓</p>

<center><img src="/blog/assets/2022-09-07-jogashima2/andromeda.jpg" alt="アンドロメダ銀河（前回）" style="width: 70%;" />
<p>Nikon Z50; 250 mm（フルサイズ換算: 350 mm）, F6.3, 180 秒 × 4 枚（720 秒）, ISO 3200</p>
<p>前回撮影した アンドロメダ銀河（M31）　城ヶ島にて<br />
天体写真というよりも双眼鏡で覗いた感じ。スタックしてもこの程度でした</p>
<hr style="width: 50%" /></center>

<p>撮影技術・加工技術は何ら進歩していないのにこの違い！　露光時間をもっと増やせばもっと良い写真が撮れそうです（多分）。</p>]]></content><author><name>今月の新刊（@skrbcr）</name></author><category term="astron" /><summary type="html"><![CDATA[Nikon Z50; Vixen FL55SS鏡筒使用, 180 秒 × 9 枚（1620 秒）, ISO 3200 アンドロメダ銀河（M31） 中央のバルジのみならず、円盤も写っている。とはいえ円盤はぼんやり程度 二つの伴銀河（M32, M110）はばっちり]]></summary></entry><entry><title type="html">城ヶ島 天体撮影 2022夏 その2</title><link href="https://skrbcr.github.io/blog/astron/jogashima2" rel="alternate" type="text/html" title="城ヶ島 天体撮影 2022夏 その2" /><published>2022-09-07T00:00:00+09:00</published><updated>2022-09-07T00:00:00+09:00</updated><id>https://skrbcr.github.io/blog/astron/jogashima2</id><content type="html" xml:base="https://skrbcr.github.io/blog/astron/jogashima2"><![CDATA[<h2 id="まえがき">まえがき</h2>
<p>8月下旬に <a href="jogasima">前回</a> と同じ城ヶ島の撮影地点にて天体撮影を行いました。今回は前回と違い、ポータブルでない赤道儀（Vixen MD-6SP）を使用しました。この赤道儀は随分古く、父が学生時代に使っていて長らく物置に眠っていたものです。そういう訳で上手く動作しないのではないかと心配でしたが、全くの杞憂でまだまだ現役で使えました。</p>

<p>また、前回の撮影では圧倒的に露出不足だったので、今回は露出に気を配って撮影しました。</p>

<h2 id="撮影">撮影</h2>

<p>今回は天候の兼ね合いもあり、二つの星雲 M8・M20 と、アンドロメダ銀河の二枚です。</p>

<center><img src="/blog/assets/2022-09-07-jogashima2/m8_m20.jpg" alt="二つの星雲 M8・M20" style="width: 50%;" />
<p>Nikon Z50; 250 mm（フルサイズ換算: 350 mm）, F6.3, 180 秒 × 5 枚（900 秒）, ISO 3200</p>
<p>M8（干潟星雲）・M20（三裂星雲）<br />
天の川銀河の中心部に位置する二つの星雲。左下がM8、右上がM20。</p><hr style="width: 50%" /></center>

<p></p>

<center><img src="/blog/assets/2022-09-07-jogashima2/andromeda.jpg" alt="アンドロメダ銀河" style="width: 90%;" />
<p>Nikon Z50; 250 mm（フルサイズ換算: 350 mm）, F6.3, 180 秒 × 4 枚（720 秒）, ISO 3200</p>
<p>アンドロメダ銀河（M31）<br />
中央に鎮座。円盤のガスも僅かに写っている箇所がある。<br />
周囲には伴銀河の M110（アンドロメダの北）と、M32 思われるもの（アンドロメダの南東すぐ）が写っている。</p>
<hr style="width: 50%" /></center>

<h2 id="あとがき">あとがき</h2>
<p>適正露出についての知識を得て、前回よりも綺麗な画像を得ることができました（ただし、アップした画像はいずれもサイズを落とすために縮小しています・・・）。M8・M20はよく撮れたと勝手に思っています。アンドロメダ銀河については総露出時間を更に伸ばして枚数を重ねることで、より鮮明な画像が得られるのではないかと期待しています。とはいえ、基本的な技術で向上できる部分は沢山あるので、引き続きそういった知識の習得をしたいと思います。</p>]]></content><author><name>今月の新刊（@skrbcr）</name></author><category term="astron" /><summary type="html"><![CDATA[まえがき 8月下旬に 前回 と同じ城ヶ島の撮影地点にて天体撮影を行いました。今回は前回と違い、ポータブルでない赤道儀（Vixen MD-6SP）を使用しました。この赤道儀は随分古く、父が学生時代に使っていて長らく物置に眠っていたものです。そういう訳で上手く動作しないのではないかと心配でしたが、全くの杞憂でまだまだ現役で使えました。]]></summary></entry></feed>